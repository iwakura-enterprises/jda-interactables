plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id "tech.medivh.plugin.publisher" version "1.2.3"
    id 'enterprises.iwakura.amber' version '1.0.0'
}

group 'enterprises.iwakura'
version '1.0.0'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://m2.chew.pro/snapshots" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/releases" }
}

dependencies {
    // JDA
    api 'net.dv8tion:JDA:5.6.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.+'
    annotationProcessor 'org.projectlombok:lombok:1.18.+'
    testCompileOnly 'org.projectlombok:lombok:1.18.+'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.+'
}

medivhPublisher {
    groupId = project.group.toString()
    artifactId = project.name
    version = project.version.toString()
    pom {
        name = "jda-interactables"
        description = "Interactable components for JDA"
        url = "https://github.com/iwakura-enterprises/jda-interactables"
        licenses {
            license {
                name = "The MIT License"
                url = "https://opensource.org/license/mit"
            }
        }
        developers {
            developer {
                id = "mayuna"
                name = "Marek Lof"
                email = "uwulilmayu@gmail.com"
            }
        }
        scm {
            connection = "scm:git:"
            url = "https://github.com/iwakura-enterprises/jda-interactables.git"
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        csv.required.set(true)
    }
}

// UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

task publishCloseAndRelease() {
    dependsOn 'cleanBuildMedivhMavenRepo'
    dependsOn 'uploadToSonatype'
    dependsOn 'publishDeployment'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

signing {
    useInMemoryPgpKeys(
            System.getenv("GPG_KEY_ID"),
            System.getenv("GPG_PRIVATE_KEY"),
            System.getenv("GPG_PASSWORD")
    )
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.release = 8
}
